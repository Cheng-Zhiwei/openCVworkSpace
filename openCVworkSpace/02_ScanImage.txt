#include <opencv2/core.hpp>  //核心模块，定义了基本的数据结构和算术函数
#include <opencv2/core/utility.hpp>  //包含getTickFrequency()等函数
#include "opencv2/imgcodecs.hpp"  //图片编解码、加载保存之类的函数
#include <opencv2/highgui.hpp>  //视频捕捉、图像和视频的编码解码、图形交互界面的接口
#include <iostream>  //C++中用于数据的流式输入与输出的头文件
#include <sstream>  //使用stringsteam类型需要用到的头文件

using namespace std;
using namespace cv;

static void help() //静态函数，这个函数输出函数信息及命令行参数信息
{
	cout
		<< "\n--------------------------------------------------------------------------" << endl
		<< "This program shows how to scan image objects in OpenCV (cv::Mat). As use case"
		<< " we take an input image and divide the native color palette (255) with the " << endl
		<< "input. Shows C operator[] method, iterators and at function for on-the-fly item address calculation." << endl
		<< "Usage:" << endl
		<< "./how_to_scan_images <imageNameToUse> <divideWith> [G]" << endl
		<< "if you add a G parameter the image is processed in gray scale" << endl
		<< "--------------------------------------------------------------------------" << endl
		<< endl;
}



/*下面是C操作符[]（指针）、迭代器、即时项目地址计算三种方法函数声明，
其中的&读作引用，相当于给函数或变量名起了第二个名字，引用初始化某个变量后，
可以使用该引用名称或原变量名称指向该变量，和指针有一定的区别，具体请参考C++引用*/


//Mat& 返回Mat类型返回值的引用
Mat& ScanImageAndReduceC(Mat& I, const uchar* table);//通过C指针方式扫描
Mat& ScanImageAndReduceIterator(Mat& I, const uchar* table);//通过迭代器
Mat& ScanImageAndReduceRandomAccess(Mat& I, const uchar * table);//通过at函数

/*命令行应输入：*how_to_scan_images <imageNameToUse> <divideWith>[G]*/
// argc是命令行总的参数个数，即该程序要输入个参数个数，这里为3
//argv[]是argc个参数，其中第0个参数是程序的全名，后面跟的用户输入的参数
int main(int argc, char* argv[])
{
	help();
	if (argc < 3)//判断输入参数是否合法，如果个数小于3个，则输出参数不够,命令行一共需要输入3个参数
	{
		cout << "Not enough parameters" << endl;
		return -1;
	}

	Mat I, J; //I为输入矩阵；J为输出矩阵

	//int strcmp(const char *s1, const char *s2);
   //返回值：若s1、s2字符串相等，则返回零；若s1大于s2，则返回大于零的数；否则，则返回小于零的数。
	if (argc == 4 && !strcmp(argv[3], "G"))
		I = imread(argv[1], IMREAD_GRAYSCALE);
	else
		I = imread(argv[1], IMREAD_COLOR);

	if (I.empty())
	{
		cout << "The image" << argv[1] << " could not be loaded." << endl;
		return -1;
	}


	int divideWith = 0;  // 将我们输入的字符串转换为数字 -C++风格
	stringstream s; //这里用到了stringstream
	s << argv[2]; //将第三个参数复制给字符串,即划分区间，这里用的是10
	s >> divideWith;//将字符串转化为数字





	if (!s || !divideWith)
	{
		cout << "Invalid number entered for dividing. " << endl;
		return -1;
	}




	/*这种情况下，常用的一种方法是 颜色空间缩减 。其做法是：将现有颜色空间值除以某个输入值，
	以获得较少的颜色数。例如，颜色值0到9可取为新值0，10到19可取为10，以此类推。
	uchar （无符号字符，即0到255之间取值的数）类型的值除以 int 值，结果仍是 char 。
	因为结果是char类型的，所以求出来小数也要向下取整。利用这一点，刚才提到在 uchar 定义域中进行
	的颜色缩减运算就可以表达为下列形式：*/

	uchar table[256];//建立一张颜色空间缩减的表格，其实就是数组，方便后边查找赋值
	for (int i = 0; i < 256; ++i)
		table[i] = (uchar)(divideWith * (i / divideWith));




	const int times = 100;//定义常量，即值不会改变的量。常量的值为100，目的是计算执行100次的平均时间
	double t;//平均执行时间


	////////////////////C程序运行时间////////////////////
	t = (double)getTickCount();//获得程序运行的总次数

	for (int i = 0; i < times; ++i) //执行该程序100次
	{
		cv::Mat clone_i = I.clone(); //复制一个I
		J = ScanImageAndReduceC(clone_i, table);//使用函数进行计算
	}

	//1000 * 总次数 / 一秒内重复的次数 = 时间(ms)
	t = 1000 * ((double)getTickCount() - t) / getTickFrequency();
	t /= times;
	cout << "Time of reducing with the C operator [] (averaged for "
		<< times << " runs): " << t << " milliseconds." << endl;


	////////////////////Iterator程序运行时间////////////////////
	t = (double)getTickCount();

	for (int i = 0; i < times; ++i)
	{
		cv::Mat clone_i = I.clone();
		J = ScanImageAndReduceIterator(clone_i, table);
	}



	//1000 * 总次数 / 一秒内重复的次数 = 时间(ms)
	t = 1000 * ((double)getTickCount() - t) / getTickFrequency();
	t /= times;

	cout << "Time of reducing with the iterator (averaged for "
		<< times << " runs): " << t << " milliseconds." << endl;



	////////////////////////////////////////////////////////////
	t = (double)getTickCount();

	for (int i = 0; i < times; ++i)
	{
		cv::Mat clone_i = I.clone();
		ScanImageAndReduceRandomAccess(clone_i, table);
	}

	t = 1000 * ((double)getTickCount() - t) / getTickFrequency();
	t /= times;

	cout << "Time of reducing with the on-the-fly address generation - at function (averaged for "
		<< times << " runs): " << t << " milliseconds." << endl;



	//////////////////////////LUT运行时间//////////////////////////////////////
	Mat lookUpTable(1, 256, CV_8U);
	uchar* p = lookUpTable.ptr();
	for (int i = 0; i < 256; ++i)
		p[i] = table[i];
	//! [table-init]

	t = (double)getTickCount();

	for (int i = 0; i < times; ++i)
		//! [table-use]
		LUT(I, lookUpTable, J);
	//! [table-use]

	t = 1000 * ((double)getTickCount() - t) / getTickFrequency();
	t /= times;

	cout << "Time of reducing with the LUT function (averaged for "
		<< times << " runs): " << t << " milliseconds." << endl;

	system("pause");
	return 0;
}

//! [scan-c]



///////////////////C实现的方法////////////////////////////////////////////
/*这里，我们获取了每一行开始处的指针，然后遍历至该行末尾。如果矩阵是以连续方式存储的，
我们只需请求一次指针、然后一路遍历下去就行。彩色图像的情况有必要加以注意：
因为三个通道的原因，我们需要遍历的元素数目也是3倍。*/


Mat& ScanImageAndReduceC(Mat& I, const uchar* const table)
{
	// accept only char type matrices

	//CV_Assert()在程序运行时它计算括号内的表达式，如果表达式为FALSE(或0), 程序将报告错误，并终止执行。
	CV_Assert(I.depth() == CV_8U); //I.depth()输出图像的深度,例如CV_8U

	int channels = I.channels();//返回图像的通道数

	int nRows = I.rows;//返回图像的行数
	int nCols = I.cols * channels;//列数*乘以通道数


	//判断矩阵是否是连续的，如果是连续的，就将这个矩阵当作 1 x nCols*nRows ，
	//即 1 x I.rows*I.cols*I.channels的矩阵看待。
	if (I.isContinuous())// 来去判断矩阵是否是连续存储的
	{
		nCols *= nRows;//nCols = nCols * nRows
		nRows = 1;//
	}

	int i, j;
	uchar* p;//定义指针

	for (i = 0; i < nRows; ++i)
	{
		p = I.ptr<uchar>(i);//ptr获取第I的行的首地址
		for (j = 0; j < nCols; ++j)
		{
			p[j] = table[p[j]];//在赋值运算中，i++和++i有差异，在循环中时没有差异的，都是从0开始，每次加1
			printf("%d", p[j]);
		}
	}
	return I;
}

////////////////////////////////////////////////////////////////////////////////////
//! [scan-c]
//获得图像矩阵的begin和end，然后增加迭代直至从begin到end。将*操作符添加在迭代指针前，即可访问当前指向的内容。
Mat& ScanImageAndReduceIterator(Mat& I, const uchar* const table)//const uchar* const table表示table和*table都是不可改变的
{
	// accept only char type matrices
	CV_Assert(I.depth() == CV_8U); //判断图像深度类型

	const int channels = I.channels();//获取图像的通道数
	switch (channels)
	{
	case 1://如果是单通道
	{
		MatIterator_<uchar> it, end; //MatIterator是Mat的迭代器

		// //在下面的循环中，使用了Mat的begin和end函数，使迭代器分别指向Mat I数据部分的开头和结尾。
		for (it = I.begin<uchar>(), end = I.end<uchar>(); it != end; ++it) //遍历象素，进行替换
			*it = table[*it];
		break;
	}


	case 3://如果是3通道
	{
		MatIterator_<Vec3b> it, end;
		for (it = I.begin<Vec3b>(), end = I.end<Vec3b>(); it != end; ++it)
		{
			(*it)[0] = table[(*it)[0]];
			(*it)[1] = table[(*it)[1]];
			(*it)[2] = table[(*it)[2]];
		}
	}
	}

	return I;
}
}


//////////////////////////////////////////////////////////////////////////
Mat& ScanImageAndReduceRandomAccess(Mat& I, const uchar* const table)
{
	// accept only char type matrices
	CV_Assert(I.depth() == CV_8U);

	const int channels = I.channels();
	switch (channels)
	{
	case 1:
	{
		for (int i = 0; i < I.rows; ++i)
			for (int j = 0; j < I.cols; ++j)
				I.at<uchar>(i, j) = table[I.at<uchar>(i, j)];//at用于获取图像矩阵某点的值或改变某点的值
		break;
	}
	case 3:
	{
		Mat_<Vec3b> _I = I;

		for (int i = 0; i < I.rows; ++i)
			for (int j = 0; j < I.cols; ++j)
			{
				_I(i, j)[0] = table[_I(i, j)[0]];
				_I(i, j)[1] = table[_I(i, j)[1]];
				_I(i, j)[2] = table[_I(i, j)[2]];
			}
		I = _I;
		break;
	}
	}

	return I;
}




        